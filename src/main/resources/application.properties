spring.application.name=springboot-kafka
server.port=8080
server.servlet.context-path=/springboot-kafka

# What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.
# earliest - Automatically reset the offset to the earliest offset.
# latest - Automatically reset the offset to the latest offset.
# none - Throw exception to the consumer if no previous offset is found for the consumer's group.
# exception - Throw exception to the consumer.
spring.kafka.consumer.auto-offset-reset=earliest

# Comma-delimited list of host:port pairs to use for establishing the initial connections
# to the Kafka cluster. Overrides the global property, for consumers.
spring.kafka.bootstrap-servers= localhost:9092

## Unique string that identifies the consumer group to which this consumer belongs.
kafka.consumer.test.group-id=testGroupId

#spring.kafka.consumer.bootstrap-servers= localhost:9092
#spring.kafka.producer.bootstrap-servers= localhost:9092

#kafka.consumer.json.group-id=jsonGroupId

#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
##spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
##spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer


